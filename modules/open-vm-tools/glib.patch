diff --git a/open-vm-tools/lib/glibUtils/fileLogger.c b/open-vm-tools/lib/glibUtils/fileLogger.c
index 14df1c8..f5917a8 100644
--- a/open-vm-tools/lib/glibUtils/fileLogger.c
+++ b/open-vm-tools/lib/glibUtils/fileLogger.c
@@ -44,7 +44,7 @@ typedef struct FileLogger {
    guint          maxFiles;
    gboolean       append;
    gboolean       error;
-   GStaticMutex   lock;
+   GMutex         lock;
 } FileLogger;
 
 
@@ -303,7 +303,7 @@ FileLoggerLog(const gchar *domain,
    FileLogger *logger = data;
    gsize written;
 
-   g_static_mutex_lock(&logger->lock);
+   g_mutex_lock(&logger->lock);
 
    if (logger->error) {
       goto exit;
@@ -342,7 +342,7 @@ FileLoggerLog(const gchar *domain,
    }
 
 exit:
-   g_static_mutex_unlock(&logger->lock);
+   g_mutex_unlock(&logger->lock);
 }
 
 
@@ -364,7 +364,7 @@ FileLoggerDestroy(gpointer data)
    if (logger->file != NULL) {
       g_io_channel_unref(logger->file);
    }
-   g_static_mutex_free(&logger->lock);
+   g_mutex_clear(&logger->lock);
    g_free(logger->path);
    g_free(logger);
 }
@@ -411,8 +411,7 @@ GlibUtils_CreateFileLogger(const char *path,
    data->append = append;
    data->maxSize = maxSize * 1024 * 1024;
    data->maxFiles = maxFiles + 1; /* To account for the active log file. */
-   g_static_mutex_init(&data->lock);
+   g_mutex_init(&data->lock);
 
    return &data->handler;
 }
-
diff --git a/open-vm-tools/lib/glibUtils/sysLogger.c b/open-vm-tools/lib/glibUtils/sysLogger.c
index 47bb9e4..8a15c71 100644
--- a/open-vm-tools/lib/glibUtils/sysLogger.c
+++ b/open-vm-tools/lib/glibUtils/sysLogger.c
@@ -38,7 +38,7 @@ typedef struct SysLogger {
 
 
 static SysLogger *gSysLogger;
-static GStaticMutex gSysLoggerLock = G_STATIC_MUTEX_INIT;
+static GMutex gSysLoggerLock;  /* no initialization required */
 
 
 /*
@@ -105,7 +105,7 @@ SysLoggerUnref(gpointer data)
 {
    g_return_if_fail(data == gSysLogger);
    g_return_if_fail(gSysLogger->refcount > 0);
-   g_static_mutex_lock(&gSysLoggerLock);
+   g_mutex_lock(&gSysLoggerLock);
    gSysLogger->refcount -= 1;
    if (gSysLogger->refcount == 0) {
       closelog();
@@ -113,7 +113,7 @@ SysLoggerUnref(gpointer data)
       g_free(gSysLogger);
       gSysLogger = NULL;
    }
-   g_static_mutex_unlock(&gSysLoggerLock);
+   g_mutex_unlock(&gSysLoggerLock);
 }
 
 
@@ -140,7 +140,7 @@ GlibLogger *
 GlibUtils_CreateSysLogger(const char *domain,
                           const char *facility)
 {
-   g_static_mutex_lock(&gSysLoggerLock);
+   g_mutex_lock(&gSysLoggerLock);
    if (gSysLogger == NULL) {
       int facid = LOG_USER;
 
@@ -203,7 +203,6 @@ GlibUtils_CreateSysLogger(const char *domain,
    } else {
       gSysLogger->refcount += 1;
    }
-   g_static_mutex_unlock(&gSysLoggerLock);
+   g_mutex_unlock(&gSysLoggerLock);
    return &gSysLogger->handler;
 }
-
diff --git a/open-vm-tools/lib/include/vmware/tools/log.h b/open-vm-tools/lib/include/vmware/tools/log.h
index 526b7c2..e16110c 100644
--- a/open-vm-tools/lib/include/vmware/tools/log.h
+++ b/open-vm-tools/lib/include/vmware/tools/log.h
@@ -133,9 +133,9 @@
  *
  *******************************************************************************
  */
-
+#if !defined(g_info)
 #define g_info(fmt, ...) g_log(G_LOG_DOMAIN, G_LOG_LEVEL_INFO, fmt, ## __VA_ARGS__)
-
+#endif
 
 /*
  *******************************************************************************
@@ -181,4 +181,3 @@ G_END_DECLS
 /** @} */
 
 #endif /* _VMTOOLS_LOG_H_ */
-
diff --git a/open-vm-tools/lib/rpcChannel/bdoorChannel.c b/open-vm-tools/lib/rpcChannel/bdoorChannel.c
index c3e11a3..3be4193 100644
--- a/open-vm-tools/lib/rpcChannel/bdoorChannel.c
+++ b/open-vm-tools/lib/rpcChannel/bdoorChannel.c
@@ -34,7 +34,7 @@
 
 typedef struct BackdoorChannel {
    GMainContext  *mainCtx;
-   GStaticMutex   outLock;
+   GMutex         outLock;
    RpcIn         *in;
    RpcOut        *out;
    gboolean       inStarted;
@@ -119,7 +119,7 @@ RpcInStop(RpcChannel *chan)
 {
    BackdoorChannel *bdoor = chan->_private;
 
-   g_static_mutex_lock(&bdoor->outLock);
+   g_mutex_lock(&bdoor->outLock);
    if (bdoor->out != NULL) {
       if (bdoor->outStarted) {
          RpcOut_stop(bdoor->out);
@@ -128,7 +128,7 @@ RpcInStop(RpcChannel *chan)
    } else {
       ASSERT(!bdoor->outStarted);
    }
-   g_static_mutex_unlock(&bdoor->outLock);
+   g_mutex_unlock(&bdoor->outLock);
 
    if (bdoor->in != NULL) {
       if (bdoor->inStarted) {
@@ -158,7 +158,7 @@ RpcInShutdown(RpcChannel *chan)
       RpcIn_Destruct(bdoor->in);
    }
    RpcOut_Destruct(bdoor->out);
-   g_static_mutex_free(&bdoor->outLock);
+   g_mutex_clear(&bdoor->outLock);
    if (bdoor->mainCtx != NULL) {
       g_main_context_unref(bdoor->mainCtx);
    }
@@ -190,7 +190,7 @@ RpcInSend(RpcChannel *chan,
    size_t replyLen;
    BackdoorChannel *bdoor = chan->_private;
 
-   g_static_mutex_lock(&bdoor->outLock);
+   g_mutex_lock(&bdoor->outLock);
    if (!bdoor->outStarted) {
       goto exit;
    }
@@ -248,7 +248,7 @@ RpcInSend(RpcChannel *chan,
    }
 
 exit:
-   g_static_mutex_unlock(&bdoor->outLock);
+   g_mutex_unlock(&bdoor->outLock);
    return ret;
 }
 
@@ -268,7 +268,7 @@ BackdoorChannel_New(void)
    ret = RpcChannel_Create();
    bdoor = g_malloc0(sizeof *bdoor);
 
-   g_static_mutex_init(&bdoor->outLock);
+   g_mutex_init(&bdoor->outLock);
    bdoor->out = RpcOut_Construct();
    ASSERT(bdoor->out != NULL);
 
@@ -284,4 +284,3 @@ BackdoorChannel_New(void)
 
    return ret;
 }
-
diff --git a/open-vm-tools/lib/syncDriver/syncDriverPosix.c b/open-vm-tools/lib/syncDriver/syncDriverPosix.c
index 449f3f9..fedc53e 100644
--- a/open-vm-tools/lib/syncDriver/syncDriverPosix.c
+++ b/open-vm-tools/lib/syncDriver/syncDriverPosix.c
@@ -73,7 +73,7 @@ SyncDriverIsRemoteFSType(const char *fsType)
 
    for (i = 0; i < ARRAYSIZE(gRemoteFSTypes); i++) {
       if (Str_Strncmp(fsType, gRemoteFSTypes[i],
-                      sizeof gRemoteFSTypes[i]) == 0) {
+                      sizeof *gRemoteFSTypes[i]) == 0) {
          return TRUE;
       }
    }
@@ -327,4 +327,3 @@ SyncDriver_CloseHandle(SyncDriverHandle *handle)   // IN/OUT
       *handle = NULL;
    }
 }
-
diff --git a/open-vm-tools/libvmtools/i18n.c b/open-vm-tools/libvmtools/i18n.c
index c526e83..12f6581 100644
--- a/open-vm-tools/libvmtools/i18n.c
+++ b/open-vm-tools/libvmtools/i18n.c
@@ -54,7 +54,7 @@ typedef struct MsgCatalog {
 
 typedef struct MsgState {
    HashTable     *domains; /* List of text domains. */
-   GStaticMutex   lock;    /* Mutex to protect shared state. */
+   GMutex         lock;    /* Mutex to protect shared state. */
 } MsgState;
 
 
@@ -132,7 +132,7 @@ MsgInitState(gpointer unused)
 {
    ASSERT(gMsgState == NULL);
    gMsgState = g_new0(MsgState, 1);
-   g_static_mutex_init(&gMsgState->lock);
+   g_mutex_init(&gMsgState->lock);
    return NULL;
 }
 
@@ -343,7 +343,7 @@ MsgGetString(const char *domain,
     * This lock is pretty coarse-grained, but a lot of the code below just runs
     * in exceptional situations, so it should be OK.
     */
-   g_static_mutex_lock(&state->lock);
+   g_mutex_lock(&state->lock);
 
    catalog = MsgGetCatalog(domain);
    if (catalog != NULL) {
@@ -414,7 +414,7 @@ MsgGetString(const char *domain,
       }
    }
 
-   g_static_mutex_unlock(&state->lock);
+   g_mutex_unlock(&state->lock);
 
    return strp;
 }
@@ -681,7 +681,7 @@ VMToolsMsgCleanup(void)
       if (gMsgState->domains != NULL) {
          HashTable_Free(gMsgState->domains);
       }
-      g_static_mutex_free(&gMsgState->lock);
+      g_mutex_clear(&gMsgState->lock);
       g_free(gMsgState);
    }
 }
@@ -774,9 +774,9 @@ VMTools_BindTextDomain(const char *domain,
                    "catalog dir '%s'.\n", domain, lang, catdir);
       }
    } else {
-      g_static_mutex_lock(&state->lock);
+      g_mutex_lock(&state->lock);
       MsgSetCatalog(domain, catalog);
-      g_static_mutex_unlock(&state->lock);
+      g_mutex_unlock(&state->lock);
    }
    g_free(file);
    free(dfltdir);
@@ -828,4 +828,3 @@ VMTools_GetUtf16String(const char *domain,
    return MsgGetString(domain, msgid, STRING_ENCODING_UTF16_LE);
 }
 #endif
-
diff --git a/open-vm-tools/libvmtools/vmxLogger.c b/open-vm-tools/libvmtools/vmxLogger.c
index 99e51f1..4880aab 100644
--- a/open-vm-tools/libvmtools/vmxLogger.c
+++ b/open-vm-tools/libvmtools/vmxLogger.c
@@ -27,7 +27,7 @@
 
 typedef struct VMXLoggerData {
    GlibLogger     handler;
-   GStaticMutex   lock;
+   GMutex         lock;
    RpcChannel    *chan;
 } VMXLoggerData;
 
@@ -60,7 +60,7 @@ VMXLoggerLog(const gchar *domain,
 {
    VMXLoggerData *logger = data;
 
-   g_static_mutex_lock(&logger->lock);
+   g_mutex_lock(&logger->lock);
    if (RpcChannel_Start(logger->chan)) {
       gchar *msg;
       gint cnt = VMToolsAsprintf(&msg, "log %s", message);
@@ -75,7 +75,7 @@ VMXLoggerLog(const gchar *domain,
       g_free(msg);
       RpcChannel_Stop(logger->chan);
    }
-   g_static_mutex_unlock(&logger->lock);
+   g_mutex_unlock(&logger->lock);
 }
 
 
@@ -95,7 +95,7 @@ VMXLoggerDestroy(gpointer data)
 {
    VMXLoggerData *logger = data;
    RpcChannel_Destroy(logger->chan);
-   g_static_mutex_free(&logger->lock);
+   g_mutex_clear(&logger->lock);
    g_free(logger);
 }
 
@@ -119,8 +119,7 @@ VMToolsCreateVMXLogger(void)
    data->handler.addsTimestamp = TRUE;
    data->handler.shared = TRUE;
    data->handler.dtor = VMXLoggerDestroy;
-   g_static_mutex_init(&data->lock);
+   g_mutex_init(&data->lock);
    data->chan = BackdoorChannel_New();
    return &data->handler;
 }
-
diff --git a/open-vm-tools/services/vmtoolsd/mainLoop.c b/open-vm-tools/services/vmtoolsd/mainLoop.c
index 67a23d6..2b76ceb 100644
--- a/open-vm-tools/services/vmtoolsd/mainLoop.c
+++ b/open-vm-tools/services/vmtoolsd/mainLoop.c
@@ -377,10 +377,6 @@ ToolsCore_Setup(ToolsServiceState *state)
    GMainContext *gctx;
    ToolsServiceProperty ctxProp = { TOOLS_CORE_PROP_CTX };
 
-   if (!g_thread_supported()) {
-      g_thread_init(NULL);
-   }
-
    ToolsCore_ReloadConfig(state, FALSE);
 
    /*
@@ -405,7 +401,6 @@ ToolsCore_Setup(ToolsServiceState *state)
    state->ctx.isVMware = VmCheck_IsVirtualWorld();
    g_main_context_unref(gctx);
 
-   g_type_init();
    state->ctx.serviceObj = g_object_new(TOOLSCORE_TYPE_SERVICE, NULL);
 
    /* Register the core properties. */
@@ -444,4 +439,3 @@ ToolsCore_Run(ToolsServiceState *state)
    }
    return ToolsCoreRunLoop(state);
 }
-
diff --git a/open-vm-tools/services/vmtoolsd/serviceObj.c b/open-vm-tools/services/vmtoolsd/serviceObj.c
index 55dc5e0..c81f254 100644
--- a/open-vm-tools/services/vmtoolsd/serviceObj.c
+++ b/open-vm-tools/services/vmtoolsd/serviceObj.c
@@ -180,14 +180,14 @@ ToolsCoreServiceGetProperty(GObject *object,
 
    id -= 1;
 
-   g_mutex_lock(self->lock);
+   g_mutex_lock(&self->lock);
 
    if (id < self->props->len) {
       ServiceProperty *p = &g_array_index(self->props, ServiceProperty, id);
       g_value_set_pointer(value, p->value);
    }
 
-   g_mutex_unlock(self->lock);
+   g_mutex_unlock(&self->lock);
 }
 
 
@@ -217,14 +217,14 @@ ToolsCoreServiceSetProperty(GObject *object,
 
    id -= 1;
 
-   g_mutex_lock(self->lock);
+   g_mutex_lock(&self->lock);
 
    if (id < self->props->len) {
       p = &g_array_index(self->props, ServiceProperty, id);
       p->value = g_value_get_pointer(value);
    }
 
-   g_mutex_unlock(self->lock);
+   g_mutex_unlock(&self->lock);
 
    if (p != NULL) {
       g_object_notify(object, p->name);
@@ -260,7 +260,7 @@ ToolsCoreServiceCtor(GType type,
                                                                       params);
 
    self = TOOLSCORE_SERVICE(object);
-   self->lock = g_mutex_new();
+   g_mutex_init(&self->lock);
    self->props = g_array_new(FALSE, FALSE, sizeof (ServiceProperty));
 
    return object;
@@ -296,7 +296,7 @@ ToolsCoreServiceDtor(GObject *object)
    }
 
    g_array_free(self->props, TRUE);
-   g_mutex_free(self->lock);
+   g_mutex_clear(&self->lock);
 }
 
 
@@ -459,7 +459,7 @@ ToolsCoreService_RegisterProperty(ToolsCoreService *obj,
                                             prop->name,
                                             G_PARAM_READWRITE);
 
-   g_mutex_lock(obj->lock);
+   g_mutex_lock(&obj->lock);
 
    sprop.id = ++PROP_ID_SEQ;
    sprop.name = g_strdup(prop->name);
@@ -467,6 +467,5 @@ ToolsCoreService_RegisterProperty(ToolsCoreService *obj,
    g_array_append_val(obj->props, sprop);
    g_object_class_install_property(G_OBJECT_CLASS(klass), sprop.id, pspec);
 
-   g_mutex_unlock(obj->lock);
+   g_mutex_unlock(&obj->lock);
 }
-
diff --git a/open-vm-tools/services/vmtoolsd/serviceObj.h b/open-vm-tools/services/vmtoolsd/serviceObj.h
index 5172db3..86ac780 100644
--- a/open-vm-tools/services/vmtoolsd/serviceObj.h
+++ b/open-vm-tools/services/vmtoolsd/serviceObj.h
@@ -39,7 +39,7 @@
 
 typedef struct ToolsCoreService {
    GObject        parent;
-   GMutex        *lock;
+   GMutex         lock;
    GArray        *props;
 } ToolsCoreService;
 
@@ -56,4 +56,3 @@ ToolsCoreService_RegisterProperty(ToolsCoreService *obj,
 
 
 #endif /* _SERVICEOBJ_H_ */
-
diff --git a/open-vm-tools/services/vmtoolsd/threadPool.c b/open-vm-tools/services/vmtoolsd/threadPool.c
index 79e177f..ae9985f 100644
--- a/open-vm-tools/services/vmtoolsd/threadPool.c
+++ b/open-vm-tools/services/vmtoolsd/threadPool.c
@@ -40,7 +40,7 @@ typedef struct ThreadPoolState {
    GThreadPool   *pool;
    GQueue        *workQueue;
    GPtrArray     *threads;
-   GMutex        *lock;
+   GMutex         lock;
    guint          nextWorkId;
 } ThreadPoolState;
 
@@ -170,9 +170,9 @@ ToolsCorePoolDoWork(gpointer data)
     * In multi-threaded mode, the thread pool callback already did this.
     */
    if (gState.pool == NULL) {
-      g_mutex_lock(gState.lock);
+      g_mutex_lock(&gState.lock);
       g_queue_remove(gState.workQueue, work);
-      g_mutex_unlock(gState.lock);
+      g_mutex_unlock(&gState.lock);
    }
 
    work->cb(gState.ctx, work->data);
@@ -223,7 +223,7 @@ ToolsCorePoolRunThread(gpointer data)
    task->cb(gState.ctx, task->data);
    task->active = FALSE;
 
-   g_mutex_lock(gState.lock);
+   g_mutex_lock(&gState.lock);
    /* If not active, the shutdown function will clean things up. */
    if (gState.active) {
       g_ptr_array_remove(gState.threads, task);
@@ -232,7 +232,7 @@ ToolsCorePoolRunThread(gpointer data)
                       task,
                       ToolsCorePoolDestroyThread);
    }
-   g_mutex_unlock(gState.lock);
+   g_mutex_unlock(&gState.lock);
 
    return NULL;
 }
@@ -257,9 +257,9 @@ ToolsCorePoolRunWorker(gpointer state,
 {
    WorkerTask *work;
 
-   g_mutex_lock(gState.lock);
+   g_mutex_lock(&gState.lock);
    work = g_queue_pop_tail(gState.workQueue);
-   g_mutex_unlock(gState.lock);
+   g_mutex_unlock(&gState.lock);
 
    ASSERT(work != NULL);
 
@@ -300,7 +300,7 @@ ToolsCorePoolSubmit(ToolsAppCtx *ctx,
    task->data = data;
    task->dtor = dtor;
 
-   g_mutex_lock(gState.lock);
+   g_mutex_lock(&gState.lock);
 
    if (!gState.active) {
       g_free(task);
@@ -351,7 +351,7 @@ ToolsCorePoolSubmit(ToolsAppCtx *ctx,
                                  ToolsCorePoolDestroyTask);
 
 exit:
-   g_mutex_unlock(gState.lock);
+   g_mutex_unlock(&gState.lock);
    return id;
 }
 
@@ -378,7 +378,7 @@ ToolsCorePoolCancel(guint id)
 
    g_return_if_fail(id != 0);
 
-   g_mutex_lock(gState.lock);
+   g_mutex_lock(&gState.lock);
    if (!gState.active) {
       goto exit;
    }
@@ -390,7 +390,7 @@ ToolsCorePoolCancel(guint id)
    }
 
 exit:
-   g_mutex_unlock(gState.lock);
+   g_mutex_unlock(&gState.lock);
 
    if (task != NULL) {
       if (task->srcId > 0) {
@@ -431,7 +431,7 @@ ToolsCorePoolStart(ToolsAppCtx *ctx,
    GError *err = NULL;
    StandaloneTask *task = NULL;
 
-   g_mutex_lock(gState.lock);
+   g_mutex_lock(&gState.lock);
    if (!gState.active) {
       goto exit;
    }
@@ -442,7 +442,7 @@ ToolsCorePoolStart(ToolsAppCtx *ctx,
    task->interrupt = interrupt;
    task->data = data;
    task->dtor = dtor;
-   task->thread = g_thread_create(ToolsCorePoolRunThread, task, TRUE, &err);
+   task->thread = g_thread_try_new("lame", ToolsCorePoolRunThread, task, &err);
 
    if (err == NULL) {
       g_ptr_array_add(gState.threads, task);
@@ -454,7 +454,7 @@ ToolsCorePoolStart(ToolsAppCtx *ctx,
    }
 
 exit:
-   g_mutex_unlock(gState.lock);
+   g_mutex_unlock(&gState.lock);
    return task != NULL;
 }
 
@@ -526,7 +526,7 @@ ToolsCorePool_Init(ToolsAppCtx *ctx)
    }
 
    gState.active = TRUE;
-   gState.lock = g_mutex_new();
+   g_mutex_init(&gState.lock);
    gState.threads = g_ptr_array_new();
    gState.workQueue = g_queue_new();
 
@@ -553,9 +553,9 @@ ToolsCorePool_Shutdown(ToolsAppCtx *ctx)
 {
    guint i;
 
-   g_mutex_lock(gState.lock);
+   g_mutex_lock(&gState.lock);
    gState.active = FALSE;
-   g_mutex_unlock(gState.lock);
+   g_mutex_unlock(&gState.lock);
 
    /* Notify all spawned threads to stop. */
    for (i = 0; i < gState.threads->len; i++) {
@@ -589,8 +589,7 @@ ToolsCorePool_Shutdown(ToolsAppCtx *ctx)
    /* Cleanup. */
    g_ptr_array_free(gState.threads, TRUE);
    g_queue_free(gState.workQueue);
-   g_mutex_free(gState.lock);
+   g_mutex_clear(&gState.lock);
    memset(&gState, 0, sizeof gState);
    g_object_set(ctx->serviceObj, TOOLS_CORE_PROP_TPOOL, NULL, NULL);
 }
-
